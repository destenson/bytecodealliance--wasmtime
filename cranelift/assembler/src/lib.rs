#![allow(non_camel_case_types)]

mod alloc;
pub mod fuzz;
pub mod gen;
mod imm;
mod mem;
mod reg;
mod rex;
mod sink;

pub use alloc::OperandVisitor;
pub use imm::{Extension, Imm16, Imm32, Imm8, Simm32, Simm32PlusKnownOffset};
pub use mem::{Amode, DeferredTarget, GprMem, Scale};
pub use reg::{AsReg, Gpr, MinusRsp, Registers, Size};
pub use rex::RexFlags;
pub use sink::{CodeSink, Constant, KnownOffsetTable, Label, TrapCode};

// Include code generated by the `meta` crate.
use mem::emit_modrm_sib_disp;
use rex::emit_simm;
include!(concat!(env!("OUT_DIR"), "/assembler.rs"));

/// Helper function to make code generation simpler.
fn emit_modrm(buffer: &mut impl CodeSink, enc_reg_g: u8, rm_e: u8) {
    let modrm = rex::encode_modrm(0b11, enc_reg_g & 7, rm_e & 7);
    buffer.put1(modrm);
}

/// TODO
pub fn generated_files() -> Vec<std::path::PathBuf> {
    env!("ASSEMBLER_BUILT_FILES")
        .split(':')
        .map(std::path::PathBuf::from)
        .collect()
}
